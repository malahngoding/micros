generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  email     String?  @unique @db.VarChar(255)
  avatar    String?  @db.VarChar(255)
  bio       String?
  fresh     Boolean
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id                 Int                 @id @default(autoincrement())
  identification     String              @unique
  userName           String              @unique @db.VarChar(64)
  Profile            Profile?
  BadgeForUser       BadgeForUser[]
  FlashCardUserStats FlashCardUserStats?
  WalletForUser      WalletForUser?
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @db.Timestamp(6)
  FlashCardResults   FlashCardResults[]
}

model QuestionGroup {
  id             Int              @id @default(autoincrement())
  groupName      String           @db.VarChar(255)
  questionTag    String           @db.VarChar(64)
  QuestionDetail QuestionDetail[]
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
}

model QuestionDetail {
  id              Int              @id @default(autoincrement())
  questionString  String           @db.VarChar(255)
  QuestionAnswer  QuestionAnswer[]
  QuestionGroup   QuestionGroup?   @relation(fields: [questionGroupId], references: [id])
  questionGroupId Int?
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
}

model QuestionAnswer {
  id               Int             @id @default(autoincrement())
  order            Int
  answerString     String          @db.VarChar(255)
  isCorrect        Boolean
  QuestionDetail   QuestionDetail? @relation(fields: [questionDetailId], references: [id])
  questionDetailId Int?
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime        @default(now()) @db.Timestamp(6)
}

model BadgeForUser {
  id          Int       @id @default(autoincrement())
  userId      Int
  badgePoolId Int
  user        User      @relation(fields: [userId], references: [id])
  badge       BadgePool @relation(fields: [badgePoolId], references: [id])
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
}

model WalletForUser {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  evm       String   @default("") @db.VarChar(255)
  hedera    String   @default("") @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model BadgePool {
  id            Int            @id @default(autoincrement())
  title         String
  media         String
  type          String
  BadgeForUser  BadgeForUser[]
  descriptionEn String         @db.VarChar(255)
  descriptionId String         @db.VarChar(255)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @db.Timestamp(6)
}

model FlashCardUserStats {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  user                  User     @relation(fields: [userId], references: [id])
  finishedGroupQuestion Int      @default(0)
  answeredQuestion      Int      @default(0)
  skippedQuestion       Int      @default(0)
  correctAnswer         Int      @default(0)
  wrongAnswer           Int      @default(0)
  accuracy              Float    @default(0)
  currentPoint          Int      @default(0)
  currentGroupName      String
  currentHash           String
  createdAt             DateTime @default(now()) @db.Timestamp(6)
  updatedAt             DateTime @default(now()) @db.Timestamp(6)
}

model FlashCardResults {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}
