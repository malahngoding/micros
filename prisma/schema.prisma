generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  email     String?  @unique @db.VarChar(255)
  avatar    String?  @db.VarChar(255)
  bio       String?
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id             Int      @id @default(autoincrement())
  identification String   @unique
  Profile        Profile?
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @db.Timestamp(6)
}

model QuestionGroup {
  id             Int              @id @default(autoincrement())
  groupName      String           @db.VarChar(255)
  questionTag    String           @db.VarChar(64)
  QuestionDetail QuestionDetail[]
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
}

model QuestionDetail {
  id              Int              @id @default(autoincrement())
  questionString  String           @db.VarChar(255)
  QuestionAnswer  QuestionAnswer[]
  QuestionGroup   QuestionGroup?   @relation(fields: [questionGroupId], references: [id])
  questionGroupId Int?
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
}

model QuestionAnswer {
  id               Int             @id @default(autoincrement())
  order            Int
  answerString     String          @db.VarChar(255)
  isCorrect        Boolean
  QuestionDetail   QuestionDetail? @relation(fields: [questionDetailId], references: [id])
  questionDetailId Int?
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime        @default(now()) @db.Timestamp(6)
}
